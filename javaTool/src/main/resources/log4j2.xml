<?xml version="1.0" encoding="UTF-8"?>
<!--
status=“warn” 日志框架本身的输出日志级别
monitorInterval="5" 自动加载配置文件的间隔时间，不低于5秒
-->
<configuration status="warn" monitorInterval="5">
    <!-- 日志处理 -->
    <appenders>
        <!-- 控制台输出 appender对象 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 日志消息格式 -->
            <PatternLayout pattern="[%d{HH:mm:ss.SSS}] [%t] [%-5level] %c{36}:%L --- %m%n"/>
        </Console>

        <!-- 日志文件输出 appender对象 -->
        <File name="file" fileName="./log4j_logs/log4j2.log">
            <!-- 日志消息格式 -->
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} --- %m%n"/>
        </File>

        <!-- 使用随机读写流的日志文件输出，appender对象，性能提高 -->
        <RandomAccessFile name="accessFile" fileName="./log4j_logs/log4j-access.log">
            <!-- 日志消息格式 -->
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] [%-5level] %l %c{36} --- %m%n"/>
        </RandomAccessFile>

        <!-- 按照一定规则拆分的日志文件，appender对象 -->
        <RollingFile name="rollingFile" fileName="./log4j_logs/rollingFile.log"
                     filePattern="./logs/$${date:yyyy-MM-dd}/rolling-%d{yyyy-MM-dd-HH}.%i.log">
            <!--日志级别过滤，只接受程序中DEBUG级别的日志进行处理-->
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 日志消息格式 -->
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%t] [%-5level] %l %c{36} --- %m%n"/>
            <policies>
                <!-- 在系统启动时，触发拆分规则，生成一个新的日志文件 -->
                <OnStartupTriggeringPolicy/>
                <!-- 按照文件大小拆分，10MB -->
                <SizeBasedTriggeringPolicy size="10MB"/>
                <!-- 按照时间节点拆分，规则根据 filePattern 定义的-->
                <TemiBaseTriggeringPolicy/>
            </policies>
            <!-- 防止日志文件太大，造成服务器内存溢出的问题，
                在同一个目录下（也就是每天），文件的个数限定为 30 个，超过就进行覆盖 -->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>
    </appenders>

    <!-- 定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>
        <!--默认的root的logger，使用root配置日志级别-->
        <root level="DEBUG">
            <!--指定日志处理器-->
            <appender-ref ref="Console"/>
            <appender-ref ref="file"/>
        </root>

        <!-- 自定义logger对象 -->
        <logger name="com.johann.log.log4j" level = "debug" additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="file"/>
            <appender-ref ref="accessFile"/>
            <appender-ref ref="rollingFile"/>
        </logger>

        <!-- 自定义logger对象，使用异步日志 AsyncLogger 方式
        includeLocation="false" 关闭日志记录的行号信息，开启输出行号信息性能可能会比同步记录还差-->
        <AsyncLogger name="com.johann.log.log4j.asyncLogger" level = "info" includeLocation="false" additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="file"/>
            <!--<appender-ref ref="accessFile"/>
            <appender-ref ref="rollingFile"/>-->
        </AsyncLogger>
    </loggers>
</configuration>
