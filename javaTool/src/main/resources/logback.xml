<?xml version="1.0" encoding="UTF-8"?>
<!--scan:
            当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:
            设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:
            当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
packagingData：
            可令每一行StackTrace输出其对应jar包。需注意，其计算成本高昂

configuration 子节点为 appender、logger、root
-->


<configuration scan="true" scanPeriod="60 seconds" debug="false" packagingData="false">
    <!--<contextName>：设置上下文名称，可作为区分不同多个应用程序到同一target的区分，默认为"default"-->
    <contextName>javaTool</contextName>
    <!--日志文件所在目录，如果是tomcat，如下写法日志文件会在则为${TOMCAT_HOME}/bin/logs/目录下-->
    <property name="LOG_HOME" value="logback_logs"/>

    <!--控制台-->
    <!--顾名思义，ConsoleAppender 附加在控制台上，或者更准确地说，附加在 System.out 或 System.err 上，前者是默认目标。
    ConsoleAppender 在用户指定的编码器的帮助下格式化事件。 Encoders 将在后续章节中讨论。
    System.out 和 System.err 都是 java.io.PrintStream 类型。 因此，它们被包装在一个缓冲 I/O 操作的 OutputStreamWriter 中。
    -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--字符串值 System.out 或 System.err 之一。默认目标是 System.out。-->
        <target>System.out</target>
        <!--默认情况下 withJansi 属性设置为 false。 将 withJansi 设置为 true 会激活 Jansi 库，该库为 Windows 机器上的 ANSI 颜色代码提供支持。
        在 Windows 主机上，如果此属性设置为 true，那么您应该将“org.fusesource.jansi:jansi:${jansi.version}”放在类路径中。
        请注意，Linux 和 Mac OS X 等基于 Unix 的操作系统默认支持 ANSI 颜色代码。
        在 Eclipse IDE 下，您可能想在 Eclipse 控制台插件中尝试 ANSI。-->
        <withJansi>false</withJansi>
        <!--编码格式-->
        <encoder>
            <!--格式化输出：%d表示日期，%thread(%t)表示线程名，%-5level：级别从左显示5个字符宽度 %logger输出日志的logger名 %msg：日志消息，%n是换行符 -->
            <!--着色（Coloring）
            基于ANSI颜色代码，Logback可使用颜色关键词来为分组设置颜色。
            内置了："%highlight","%black", "%red", "%green","%yellow","%blue", "%magenta","%cyan", "%white", "%gray", "%boldRed","%boldGreen", "%boldYellow", "%boldBlue", "%boldMagenta""%boldCyan", "%boldWhite"
            -->
            <!--%-20.30logger 表示：左对齐true，最小宽度20，最大宽度30-->
            <!--logger{length}  length表示推荐最大长度，logback会根据该长度适当缩写Logger名，但始终会保证最右段不会缩写-->
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%contextName] [%-4relative] [%t] %highlight(%-5level) %-20.30logger{36} %L : %msg%n</pattern>
            <!--解决乱码问题-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--日志文件-->
    <!--唯一命名文件-->
    <!--在“bySecond”键下将格式为“yyyyMMdd'T'HHmmss”的当前时间插入到记录器上下文中。 此值将可用于所有后续配置元素-->
    <!--timestamp 元素采用两个必需的属性 key 和 datePattern 以及一个可选的 timeReference 属性。 key 属性是键的名称，在该键下，时间戳将作为变量可供后续配置元素使用。
    datePattern 属性表示用于将当前时间（解析配置文件的时间）转换为字符串的日期模式。 日期模式应遵循 SimpleDateFormat 中定义的约定。
     timeReference 属性表示时间戳的时间参考。 默认为配置文件的解释/解析时间，即当前时间。 但是，在某些情况下，使用上下文出生时间作为时间参考可能很有用。
     这可以通过将 timeReference 属性设置为“contextBirth”来完成。
    -->
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss" timeReference = "contextBirth"/>

    <appender name="logfile" class="ch.qos.logback.core.FileAppender">
        <!--要写入的文件的名称。如果文件的父目录不存在， FileAppender将自动创建它，包括任何必要但不存在的父目录。-->
        <!--使用之前创建的时间戳创建一个唯一的 命名日志文件-->
        <file>${LOG_HOME}/logfile-${bySecond}.log</file>
        <!--如果为 true，则将事件附加到现有文件的末尾。否则，如果append为 false，则任何现有文件都将被截断。append选项默认设置为 true 。-->
        <append>true</append>
        <!--将 immediateFlush 设置为 false 以获得更高的日志记录吞吐量。
        默认情况下，每个日志事件都会立即刷新到底层输出流。 这种默认方法更安全，因为如果您的应用程序在没有正确关闭附加程序的情况下退出，日志事件不会丢失。
        但是，为了显着提高日志记录吞吐量，您可能需要将 immediateFlush 属性设置为 false。
        -->
        <immediateFlush>true</immediateFlush>
        <!--在谨慎模式下，FileAppender 将安全地写入指定文件，即使存在运行在不同 JVM 中的其他 FileAppender 实例，也可能运行在不同主机上。 谨慎模式的默认值为 false。
        谨慎模式可以与 RollingFileAppender 结合使用，尽管有一些限制。
        谨慎模式意味着 append 属性自动设置为 true。
        -->
        <prudent>false</prudent>
        <!-- 编码器默认分配类型
             ch.qos.logback.classic.encoder.PatternLayoutEncoder
        -->
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--滚动文件-->
    <!--RollingFileAppender 扩展了 FileAppender 具有滚动日志文件的能力。
    例如，RollingFileAppender 可以记录到一个名为 log.txt 的文件，一旦满足某个条件，就可以将其记录目标更改为另一个文件。

    有两个重要的子组件与 RollingFileAppender 交互。 第一个 RollingFileAppender 子组件，即 RollingPolicy，（见下文）负责执行翻转所需的操作。
    RollingFileAppender 的第二个子组件，即 TriggeringPolicy，（见下文）将确定是否以及何时发生翻转。
    因此，RollingPolicy 负责什么，而 TriggeringPolicy 负责何时。

    为了有任何用途，RollingFileAppender 必须同时设置 RollingPolicy 和 TriggeringPolicy。
    但是，如果它的 RollingPolicy 也实现了 TriggeringPolicy 接口，那么只需要显式指定前者即可。

    下面的例子中 “TimeBasedRollingPolicy<E> extends RollingPolicyBase implements TriggeringPolicy<E>” 实现了TriggeringPolicy接口
    -->
    <appender name="infoFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--请参阅 FileAppender 属性。请注意，file 可以为 null，在这种情况下，输出仅写入 RollingPolicy 指定的目标。-->
        <file></file>
        <!--请参阅 FileAppender 属性。-->
        <append>true</append>
        <!--true 支持多JVM写入同一个日志文件-->
        <prudent>true</prudent>

        <!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>

        <!--TimeBasedRollingPolicy 可能是最流行的滚动策略。 它定义了基于时间的翻转策略，例如按天或按月。 TimeBasedRollingPolicy 承担翻转以及触发所述翻转的责任。
        实际上，TimeBasedTriggeringPolicy 实现了 RollingPolicy 和 TriggeringPolicy 接口。-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--在某些情况下，您可能希望根据不同于主机时区的时钟来翻转日志文件。可以在 %d 转换说明符中按照日期和时间模式传递时区参数。-->
            <!--TimeBasedRollingPolicy 支持自动文件压缩。如果 fileNamePattern 选项的值以 .gz 或 .zip 结尾，则启用此功能。
            ${LOG_HOME}/logFile.%d{yyyy-MM-dd, UTC}.zip -->
            <fileNamePattern>${LOG_HOME}/logRollingFile.%d{yyyy-MM-dd, UTC}.log</fileNamePattern>
            <!--可选的 maxHistory 属性控制要保留的存档文件的最大数量，异步删除旧文件。
            例如，如果您指定每月翻转，并将 maxHistory 设置为 6，则将保留 6 个月的存档文件，而 6 个月之前的文件将被删除。 请注意，由于旧的归档日志文件已被删除，因此为归档日志文件而创建的任何文件夹都将被适当地删除。
            将 maxHistory 设置为零会禁用归档删除。 默认情况下，maxHistory 设置为零，即默认情况下不删除存档。-->
            <!--保存最近30天的日志-->
            <maxHistory>30</maxHistory>
            <!--可选的 totalSizeCap 属性控制所有存档文件的总大小。 当超过总大小上限时，最旧的档案将被异步删除。
            totalSizeCap 属性也需要设置 maxHistory 属性。 此外，始终首先应用“maxHistory”限制，然后应用“totalSizeCap”限制。
            totalSizeCap 属性可以以字节、千字节、兆字节或千兆字节为单位指定，方法是在数值后缀分别为 KB、MB 和 GB。 例如，5000000、5000KB、5MB 和 2GB 都是有效值，前三个是等效的。 没有后缀的数值被视为以字节为单位。
            默认情况下，totalSizeCap 设置为零，这意味着没有总大小上限。-->
            <totalSizeCap>5GB</totalSizeCap>
            <!--如果设置为 true，归档删除将在 appender 启动时执行。 默认情况下，此属性设置为 false。
            档案删除通常在翻转期间执行。 但是，某些应用程序的生存时间可能不足以触发翻转。 因此，对于此类短暂的应用程序，归档删除可能永远不会有机会执行。
            通过将 cleanHistoryOnStart 设置为 true，在 appender 启动时执行归档删除。-->
            <cleanHistoryOnStart>false</cleanHistoryOnStart>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>
        </encoder>
    </appender>

    <!--滚动文件-->
    <appender name="errorFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--请参阅 FileAppender 属性。请注意，file 可以为 null，在这种情况下，输出仅写入 RollingPolicy 指定的目标。-->
        <file>${LOG_HOME}/errorFile.log</file>
        <!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>error</level>
        </filter>

        <!--SizeAndTimeBasedRollingPolicy 继承了 TimeBasedRollingPolicy。可以对单个日志文件设定大小上限-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--请注意除“%d”之外的“%i”转换标记。 %i 和 %d 标记都是强制性的。 每次当前日志文件在当前时间段结束前达到 maxFileSize 时，都会以递增的索引归档，从 0 开始。
            基于大小和时间的归档支持删除旧归档文件。 您需要使用 maxHistory 属性指定要保留的周期数。
            当您的应用程序停止并重新启动时，日志记录将在正确的位置继续，即在当前期间的最大索引号处。
            -->
            <fileNamePattern>${LOG_HOME}/errorRollingFile.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--每个文件最多 100MB，保留 30 天的历史记录，但最多 5GB-->
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>5GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>
        </encoder>
    </appender>

    <!--将日志输出到logstack-->
    <!--<appender name="logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>47.93.173.81:7002</destination>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <charset>UTF-8</charset>
        </encoder>
        <keepAliveDuration>5 minutes</keepAliveDuration>
    </appender>-->

    <!--这里如果是info，spring、mybatis等框架则不会输出：TRACE < DEBUG < INFO <  WARN < ERROR-->
    <!--root是所有logger的祖先，均继承root，如果某一个自定义的logger没有指定level，就会寻找
    父logger看有没有指定级别，直到找到root。-->
    <root level="debug">
        <appender-ref ref="stdout"/>
        <appender-ref ref="logfile"/>
        <appender-ref ref="infoFile"/>
        <appender-ref ref="errorFile"/>
        <!--<appender-ref ref="logstash"/>-->
    </root>

    <!--为某个包单独配置logger

    比如定时任务，写代码的包名为：com.seentao.task
    步骤如下：
    1、定义一个appender，取名为task（随意，只要下面logger引用就行了）
    appender的配置按照需要即可


    2、定义一个logger:
    <logger name="com.seentao.task" level="DEBUG" additivity="false">
      <appender-ref ref="task" />
    </logger>
    注意：additivity必须设置为false，这样只会交给task这个appender，否则其他appender也会打印com.seentao.task里的log信息。

    3、这样，在com.seentao.task的logger就会是上面定义的logger了。
    private static Logger logger = LoggerFactory.getLogger(Class1.class);
    -->
</configuration>