<?xml version="1.0" encoding="UTF-8"?>
<!--scan:
            当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:
            设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:
            当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
packagingData：
            可令每一行StackTrace输出其对应jar包。需注意，其计算成本高昂

configuration 子节点为 appender、logger、root
-->


<configuration scan="true" scanPeriod="60 seconds" debug="false" packagingData="false">
    <!--<contextName>：设置上下文名称，可作为区分不同多个应用程序到同一target的区分，默认为"default"-->
    <contextName>coreJava</contextName>
    <!--日志文件所在目录，如果是tomcat，如下写法日志文件会在则为${TOMCAT_HOME}/bin/logs/目录下-->
    <property name="LOG_HOME" value="logback_logs"/>

    <!--控制台-->
    <!--顾名思义，ConsoleAppender 附加在控制台上，或者更准确地说，附加在 System.out 或 System.err 上，前者是默认目标。
    ConsoleAppender 在用户指定的编码器的帮助下格式化事件。 Encoders 将在后续章节中讨论。
    System.out 和 System.err 都是 java.io.PrintStream 类型。 因此，它们被包装在一个缓冲 I/O 操作的 OutputStreamWriter 中。
    -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--字符串值 System.out 或 System.err 之一。默认目标是 System.out。-->
        <target>System.out</target>
        <!--默认情况下 withJansi 属性设置为 false。 将 withJansi 设置为 true 会激活 Jansi 库，该库为 Windows 机器上的 ANSI 颜色代码提供支持。
        在 Windows 主机上，如果此属性设置为 true，那么您应该将“org.fusesource.jansi:jansi:${jansi.version}”放在类路径中。
        请注意，Linux 和 Mac OS X 等基于 Unix 的操作系统默认支持 ANSI 颜色代码。
        在 Eclipse IDE 下，您可能想在 Eclipse 控制台插件中尝试 ANSI。-->
        <withJansi>false</withJansi>
        <!--编码格式-->
        <encoder>
            <!--格式化输出：%d表示日期，%thread(%t)表示线程名，%-5level：级别从左显示5个字符宽度 %logger输出日志的logger名 %msg：日志消息，%n是换行符 -->
            <!--着色（Coloring）
            基于ANSI颜色代码，Logback可使用颜色关键词来为分组设置颜色。
            内置了："%highlight","%black", "%red", "%green","%yellow","%blue", "%magenta","%cyan", "%white", "%gray", "%boldRed","%boldGreen", "%boldYellow", "%boldBlue", "%boldMagenta""%boldCyan", "%boldWhite"
            -->
            <!--%-20.30logger 表示：左对齐true，最小宽度20，最大宽度30-->
            <!--logger{length}  length表示推荐最大长度，logback会根据该长度适当缩写Logger名，但始终会保证最右段不会缩写-->
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%contextName] %t %highlight(%-5level) %-20logger{36} --- %msg%n</pattern>
            <!--解决乱码问题-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!--这里如果是info，spring、mybatis等框架则不会输出：TRACE < DEBUG < INFO <  WARN < ERROR-->
    <!--root是所有logger的祖先，均继承root，如果某一个自定义的logger没有指定level，就会寻找
    父logger看有没有指定级别，直到找到root。-->
    <root level="info">
        <appender-ref ref="stdout"/>
    </root>
</configuration>